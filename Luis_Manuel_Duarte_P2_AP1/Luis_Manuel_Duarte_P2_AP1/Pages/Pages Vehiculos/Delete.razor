@using Shared.Models
@page "/Delete"
@page "/Delete/{VehiculoId:int}"
@inject HttpClient httpClient

<PageTitle>Eliminar Vehiculo</PageTitle>

<div class="card shadow">
    <div class="card-header">
        <h3>Eliminar Vehiculo</h3>
    </div>
    <div class="card-header">
        <h3 class="text-danger">¿Estas seguro que quieres eliminar el Vehiculo?</h3>
    </div>
    <div class="card">
        <div class="card-body">
            <div class="row">
                <p>-VehiculoId: @vehiculo.VehiculoId</p>
                <p>-Fecha: @vehiculo.Fecha.ToString("dd/MM/yyyy")</p>
                <p>-Descripci&oacute;n: @vehiculo.Descripcion</p>
                <p>-Costo: @vehiculo.Costo</p>
                <p>-Gasto: @vehiculo.Gasto</p>
                
            </div>

        </div>
        <div class="card-header">
            <h3>Detalles del vehiculo</h3>
        </div>
        <table class="table table-bordered table-hover">

            <thead>

                <tr>
                    <th>Id</th>
                    <th>Valor</th>
                    
                </tr>
            </thead>
            <tbody>
                @foreach (var detalle in ListaDetalles)
                {
                    <tr>
                        <td>@detalle.Id</td>
                        <td>@detalle.Valor</td>
                        
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="card-footer">
        <a href="" class="btn btn-secondary bi bi-arrow-left-square-fill ms-auto">Volver</a>
        <button type="button" class="btn btn-danger bi bi-trash-fill" @onclick="Eliminar">Eliminar</button>
    </div>
</div>


@code {
    [Parameter]
    public int VehiculoId { get; set; }
    public Vehiculo vehiculo { get; set; } = new Vehiculo();
    public List<Vehiculos_Detalle> ListaDetalles = new List<Vehiculos_Detalle>();

    protected override async Task OnInitializedAsync()
    {
        if (VehiculoId > 0)
        {
            vehiculo.VehiculoId = VehiculoId;
            ListaDetalles = (await httpClient.GetFromJsonAsync<List<Vehiculos_Detalle>>($"api/Vehiculoes"))!
                .Where(p => p.VehiculoId == vehiculo.VehiculoId).ToList();
            await Buscar();
        }
    }

    public async Task Buscar()
    {
        var vehiculoEncontrado = await httpClient.GetFromJsonAsync<Vehiculo>($"api/Vehiculoes/{vehiculo.VehiculoId}");
        if (vehiculoEncontrado != null)
        {
            vehiculo = vehiculoEncontrado;
        }
    }

    public async Task Eliminar()
    {
        var eliminado = await httpClient.DeleteAsync($"api/Vehiculoes/{vehiculo.VehiculoId}");
        if (eliminado.IsSuccessStatusCode)
        {
            foreach (var detalle in ListaDetalles)
            {
                if (detalle.VehiculoId == vehiculo.VehiculoId)
                {
                    await httpClient.DeleteAsync($"api/Vehiculoes/{vehiculo.VehiculoId}");
                    vehiculo = new Vehiculo();
                    ListaDetalles = new List<Vehiculos_Detalle>();
                }
            }
        }
    }
}

