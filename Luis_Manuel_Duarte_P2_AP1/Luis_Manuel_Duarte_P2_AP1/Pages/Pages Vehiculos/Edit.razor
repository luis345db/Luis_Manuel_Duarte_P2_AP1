@using Shared.Models
@page "/Edit"
@page "/Edit/{VehiculoId:int}"
@inject NavigationManager Navigation
@inject HttpClient httpClient
@inject IJSRuntime JSRuntime

<EditForm Model="vehiculo" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header">
            <h1>Registro Vehiculo </h1>
        </div>
        <div class=" card-body">
            <label>VehiculoId</label>

            <div class="input-group">
                <InputNumber min="0" @bind-Value="vehiculo.VehiculoId" class="id-input"></InputNumber>
            </div>
            <div>
                <label>Fecha:</label>
                <InputDate @bind-Value="vehiculo.Fecha" class="form-control"></InputDate>
                <ValidationMessage For="@(() => vehiculo.Fecha)" />
            </div>

            <div>
                <label>Descripci&oacute;n:</label>
                <InputText @bind-Value="vehiculo.Descripcion" class="form-control"></InputText>
                <ValidationMessage For="@(() => vehiculo.Descripcion)" />
            </div>
            <div>
                <label>Costo:</label>
                <InputNumber @bind-Value="vehiculo.Costo" class="form-control"></InputNumber>
                <ValidationMessage For="@(() => vehiculo.Costo)" />
            </div>
            <div>
                <label>Gastos:</label>
                <InputNumber @bind-Value="vehiculo.Gasto" class="form-control"></InputNumber>
                <ValidationMessage For="@(() => vehiculo.Gasto)" />
            </div>

        </div>
        <div class="card-footer ">

            <div class="card-footer">
                <button type="button" class="btn btn-outline-primary" @onclick="Atras">Volver <i class="bi bi-arrow-return-left" /></button>
                <button type="submit" class="btn btn-outline-success">Guardar <i class="bi bi-floppy-fill" /></button>
            </div>

        </div>
    </div>

    @*Detalles:*@
    <div class="card card-header mt-5">
        <h3>Detalle del Vehiculo</h3>
        <div>
            <label class="fw-bold mt-3"> VehiculoId</label>
            <InputNumber @bind-Value="Detalles.VehiculoId" class="form-control"></InputNumber>
            <ValidationMessage For="@(() => Detalles.VehiculoId)" />
        </div>
        <div class="row">
            <div class="col">
                <label class="fw-bold mt-3">AccesorioId</label>
                <InputNumber @bind-Value="Detalles.AccesorioId" class="form-control"></InputNumber>
                <ValidationMessage For="@(() => Detalles.AccesorioId)" />
            </div>
            <div class="col">
                <label class="fw-bold mt-3">Valor</label>
                <InputNumber @bind-Value="Detalles.Valor" class="form-control"></InputNumber>
                <ValidationMessage For="@(() => Detalles.Valor)" />
            </div>
        </div>
        <div class="card-footer d-flex justify-content-center">
            <button type="button" @onclick="AgregarDetalle" class="btn btn-outline-success">Agregar</button>
        </div>
        <table class='table table-bordered table-hover'>
            <thead>
                <tr>
                    <th>VehiculoId</th>
                    <th>AccesorioId</th>
                    <th>Valor</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var detalle in listaDetalles)
                {
                    var vehiculoEncontrado = BuscarVehiculo(detalle.VehiculoId);
                    <tr>
                        <td>@detalle.VehiculoId</td>
                        <td>@detalle.AccesorioId</td>
                        <td>@detalle.Valor</td>
                        <td><button type="button" class="btn btn-outline-danger bi bi-trash-fill" @onclick=@(() => RemoverDetalle(detalle))></button></td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

</EditForm>



@code {
    [Parameter]
    public int VehiculoId { get; set; }
    public Vehiculo vehiculo { get; set; } = new Vehiculo();
    public Accesorios accesorio { get; set; } = new Accesorios();
    public Vehiculos_Detalle Detalles { get; set; } = new Vehiculos_Detalle();
    public List<Accesorios> listaAccesorios { get; set; } = new List<Accesorios>();
    public List<Vehiculos_Detalle> listaDetalles = new List<Vehiculos_Detalle>();
    public bool vehiculoVacio;
    public bool accesorioVacio;


    protected override async Task OnInitializedAsync()
    {
        if (VehiculoId > 0)
        {
            var vehiculoEncontrado = await httpClient.GetFromJsonAsync<Vehiculo>($"api/Vehiculoes/{VehiculoId}");
            if (vehiculoEncontrado != null)
            {
                vehiculo = vehiculoEncontrado;
                listaDetalles = vehiculo.Detalle.ToList();
            }

        }
    }


    private async Task<Vehiculo> BuscarVehiculo(int vehiculoId)
    {
        Vehiculo vehiculo = new Vehiculo();
        var vehiculoEncontrado = await httpClient.GetFromJsonAsync<Vehiculo>($"api/Vehiculoes/{vehiculoId}");
        if (vehiculoEncontrado != null)
            return vehiculo = vehiculoEncontrado;
        return new Vehiculo();
    }

    public async Task Buscar()
    {
        var vehiculoIdEncontrado = (await httpClient.GetFromJsonAsync<List<Vehiculo>>($"api/Vehiculoes"))!
        .ToList()
        .Any(t => t.VehiculoId == vehiculo.VehiculoId);
        if (vehiculoIdEncontrado)
        {
            var vehiculoEncontrado = await httpClient.GetFromJsonAsync<Vehiculo>($"api/Vehiculoes/{vehiculo.VehiculoId}");
            if (vehiculoEncontrado != null)
            {
                this.vehiculo = vehiculoEncontrado;
                StateHasChanged();
            }
        }

    }

    public async Task Guardar()
    {
        var response = await httpClient.PostAsJsonAsync("api/Vehiculoes", vehiculo);
        if (!response.IsSuccessStatusCode)
        {
            return;
        }

        StateHasChanged();
        this.Nuevo();
        this.Atras();
    }

    void Atras()
    {
        Navigation.NavigateTo("/Index");
    }

    public void Nuevo()
    {
        vehiculo = new Vehiculo();
        Detalles = new Vehiculos_Detalle();
        listaDetalles = new List<Vehiculos_Detalle>();

    }

    public async Task Eliminar()
    {
        var response = await httpClient.DeleteAsync($"api/Vehiculoes/{vehiculo.VehiculoId}");
        if (!response.IsSuccessStatusCode)
        {
            return;
        }
        Nuevo();
    }



    public async Task AgregarDetalle()
    {
        if (vehiculo != null)
        {

            Detalles.VehiculoId = vehiculo.VehiculoId;
            listaDetalles.Add(Detalles);
            vehiculo.Detalle.Add(Detalles);
            Detalles = new Vehiculos_Detalle();
        }
    }

    public async Task RemoverDetalle(Vehiculos_Detalle details)
    {


        Detalles = details;
        listaDetalles.Remove(details);
    }
}

